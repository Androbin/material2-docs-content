{"version":3,"file":"components-examples-material-sort.umd.js","sources":["../../../../../src/components-examples/material/sort/sort-overview/sort-overview-example.html","../../../../../src/components-examples/material/sort/sort-overview/sort-overview-example.ts","../../../../../src/components-examples/material/sort/sort-harness/sort-harness-example.html","../../../../../src/components-examples/material/sort/sort-harness/sort-harness-example.ts","../../../../../src/components-examples/material/sort/index.ts","../../../../../src/components-examples/material/sort/sort_public_index.ts"],"sourcesContent":["<table matSort (matSortChange)=\"sortData($event)\">\n  <tr>\n    <th mat-sort-header=\"name\">Dessert (100g)</th>\n    <th mat-sort-header=\"calories\">Calories</th>\n    <th mat-sort-header=\"fat\">Fat (g)</th>\n    <th mat-sort-header=\"carbs\">Carbs (g)</th>\n    <th mat-sort-header=\"protein\">Protein (g)</th>\n  </tr>\n\n  <tr *ngFor=\"let dessert of sortedData\">\n    <td>{{dessert.name}}</td>\n    <td>{{dessert.calories}}</td>\n    <td>{{dessert.fat}}</td>\n    <td>{{dessert.carbs}}</td>\n    <td>{{dessert.protein}}</td>\n  </tr>\n</table>\n","import {Component} from '@angular/core';\nimport {Sort} from '@angular/material/sort';\n\nexport interface Dessert {\n  calories: number;\n  carbs: number;\n  fat: number;\n  name: string;\n  protein: number;\n}\n\n/**\n * @title Sorting overview\n */\n@Component({\n  selector: 'sort-overview-example',\n  templateUrl: 'sort-overview-example.html',\n  styleUrls: ['sort-overview-example.css'],\n})\nexport class SortOverviewExample {\n  desserts: Dessert[] = [\n    {name: 'Frozen yogurt', calories: 159, fat: 6, carbs: 24, protein: 4},\n    {name: 'Ice cream sandwich', calories: 237, fat: 9, carbs: 37, protein: 4},\n    {name: 'Eclair', calories: 262, fat: 16, carbs: 24, protein: 6},\n    {name: 'Cupcake', calories: 305, fat: 4, carbs: 67, protein: 4},\n    {name: 'Gingerbread', calories: 356, fat: 16, carbs: 49, protein: 4},\n  ];\n\n  sortedData: Dessert[];\n\n  constructor() {\n    this.sortedData = this.desserts.slice();\n  }\n\n  sortData(sort: Sort) {\n    const data = this.desserts.slice();\n    if (!sort.active || sort.direction === '') {\n      this.sortedData = data;\n      return;\n    }\n\n    this.sortedData = data.sort((a, b) => {\n      const isAsc = sort.direction === 'asc';\n      switch (sort.active) {\n        case 'name': return compare(a.name, b.name, isAsc);\n        case 'calories': return compare(a.calories, b.calories, isAsc);\n        case 'fat': return compare(a.fat, b.fat, isAsc);\n        case 'carbs': return compare(a.carbs, b.carbs, isAsc);\n        case 'protein': return compare(a.protein, b.protein, isAsc);\n        default: return 0;\n      }\n    });\n  }\n}\n\nfunction compare(a: number | string, b: number | string, isAsc: boolean) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n","<table matSort (matSortChange)=\"sortData($event)\">\n  <tr>\n    <th mat-sort-header=\"name\">Dessert</th>\n    <th mat-sort-header=\"calories\">Calories</th>\n    <th mat-sort-header=\"fat\" [disabled]=\"disableThirdHeader\">Fat</th>\n    <th mat-sort-header=\"carbs\">Carbs</th>\n    <th mat-sort-header=\"protein\">Protein</th>\n  </tr>\n\n  <tr *ngFor=\"let dessert of sortedData\">\n    <td>{{dessert.name}}</td>\n    <td>{{dessert.calories}}</td>\n    <td>{{dessert.fat}}</td>\n    <td>{{dessert.carbs}}</td>\n    <td>{{dessert.protein}}</td>\n  </tr>\n</table>\n","import {Component} from '@angular/core';\nimport {Sort} from '@angular/material/sort';\n\n/**\n * @title Testing with MatSortHarness\n */\n@Component({\n  selector: 'sort-harness-example',\n  templateUrl: 'sort-harness-example.html',\n})\nexport class SortHarnessExample {\n  disableThirdHeader = false;\n  desserts = [\n    {name: 'Frozen yogurt', calories: 159, fat: 6, carbs: 24, protein: 4},\n    {name: 'Ice cream sandwich', calories: 237, fat: 9, carbs: 37, protein: 4},\n    {name: 'Eclair', calories: 262, fat: 16, carbs: 24, protein: 6},\n    {name: 'Cupcake', calories: 305, fat: 4, carbs: 67, protein: 4},\n    {name: 'Gingerbread', calories: 356, fat: 16, carbs: 49, protein: 4},\n  ];\n\n  sortedData = this.desserts.slice();\n\n  sortData(sort: Sort) {\n    const data = this.desserts.slice();\n\n    if (!sort.active || sort.direction === '') {\n      this.sortedData = data;\n    } else {\n      this.sortedData = data.sort((a, b) => {\n        const aValue = (a as any)[sort.active];\n        const bValue = (b as any)[sort.active];\n        return (aValue < bValue ? -1 : 1) * (sort.direction === 'asc' ? 1 : -1);\n      });\n    }\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatSortModule} from '@angular/material/sort';\nimport {SortOverviewExample} from './sort-overview/sort-overview-example';\nimport {SortHarnessExample} from './sort-harness/sort-harness-example';\n\nexport {SortHarnessExample, SortOverviewExample};\n\nconst EXAMPLES = [\n  SortHarnessExample,\n  SortOverviewExample,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatSortModule,\n  ],\n  declarations: EXAMPLES,\n  exports: EXAMPLES,\n  entryComponents: EXAMPLES,\n})\nexport class SortExamplesModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i0","Component","CommonModule","MatSortModule","NgModule"],"mappings":"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"}