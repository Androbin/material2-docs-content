{"version":3,"file":"components-examples-cdk-tree.umd.js","sources":["../../../../../src/components-examples/cdk/tree/cdk-tree-flat/cdk-tree-flat-example.html","../../../../../src/components-examples/cdk/tree/cdk-tree-flat/cdk-tree-flat-example.ts","../../../../../src/components-examples/cdk/tree/cdk-tree-nested/cdk-tree-nested-example.html","../../../../../src/components-examples/cdk/tree/cdk-tree-nested/cdk-tree-nested-example.ts","../../../../../src/components-examples/cdk/tree/index.ts","../../../../../src/components-examples/cdk/tree/tree_public_index.ts"],"sourcesContent":["<cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <!-- This is the tree node template for leaf nodes -->\n  <cdk-tree-node *cdkTreeNodeDef=\"let node\" cdkTreeNodePadding\n                 [style.display]=\"shouldRender(node) ? 'flex' : 'none'\"\n                 class=\"example-tree-node\">\n    <!-- use a disabled button to provide padding for tree leaf -->\n    <button mat-icon-button disabled></button>\n    {{node.name}}\n  </cdk-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <cdk-tree-node *cdkTreeNodeDef=\"let node; when: hasChild\" cdkTreeNodePadding\n                 [style.display]=\"shouldRender(node) ? 'flex' : 'none'\"\n                 class=\"example-tree-node\">\n    <button mat-icon-button cdkTreeNodeToggle\n            [attr.aria-label]=\"'Toggle ' + node.name\"\n            (click)=\"node.isExpanded = !node.isExpanded\"\n            [style.visibility]=\"node.expandable ? 'visible' : 'hidden'\">\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n  </cdk-tree-node>\n</cdk-tree>\n","import {ArrayDataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {Component} from '@angular/core';\n\n\nconst TREE_DATA: ExampleFlatNode[] = [\n  {\n    name: 'Fruit',\n    expandable: true,\n    level: 0,\n  }, {\n    name: 'Apple',\n    expandable: false,\n    level: 1,\n  }, {\n    name: 'Banana',\n    expandable: false,\n    level: 1,\n  }, {\n    name: 'Fruit loops',\n    expandable: false,\n    level: 1,\n  }, {\n    name: 'Vegetables',\n    expandable: true,\n    level: 0,\n  }, {\n    name: 'Green',\n    expandable: true,\n    level: 1,\n  }, {\n    name: 'Broccoli',\n    expandable: false,\n    level: 2,\n  }, {\n    name: 'Brussels sprouts',\n    expandable: false,\n    level: 2,\n  }, {\n    name: 'Orange',\n    expandable: true,\n    level: 1,\n  }, {\n    name: 'Pumpkins',\n    expandable: false,\n    level: 2,\n  }, {\n    name: 'Carrots',\n    expandable: false,\n    level: 2,\n  }\n];\n\n/** Flat node with expandable and level information */\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n  isExpanded?: boolean;\n}\n\n/**\n * @title Tree with flat nodes\n */\n@Component({\n  selector: 'cdk-tree-flat-example',\n  templateUrl: 'cdk-tree-flat-example.html',\n  styleUrls: ['cdk-tree-flat-example.css'],\n})\nexport class CdkTreeFlatExample {\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n      node => node.level, node => node.expandable);\n\n  dataSource = new ArrayDataSource(TREE_DATA);\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n\n  getParentNode(node: ExampleFlatNode) {\n    const nodeIndex = TREE_DATA.indexOf(node);\n\n    for (let i = nodeIndex - 1; i >= 0; i--) {\n      if (TREE_DATA[i].level === node.level - 1) {\n        return TREE_DATA[i];\n      }\n    }\n\n    return null;\n  }\n\n  shouldRender(node: ExampleFlatNode) {\n    let parent = this.getParentNode(node);\n    while (parent) {\n      if (!parent.isExpanded) {\n        return false;\n      }\n      parent = this.getParentNode(parent);\n    }\n    return true;\n  }\n}\n","<cdk-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <!-- This is the tree node template for leaf nodes -->\n  <cdk-nested-tree-node *cdkTreeNodeDef=\"let node\" class=\"example-tree-node\">\n    <!-- use a disabled button to provide padding for tree leaf -->\n    <button mat-icon-button disabled></button>\n    {{node.name}}\n  </cdk-nested-tree-node>\n  <!-- This is the tree node template for expandable nodes -->\n  <cdk-nested-tree-node *cdkTreeNodeDef=\"let node; when: hasChild\" class=\"example-tree-node\">\n    <button mat-icon-button [attr.aria-label]=\"'Toggle ' + node.name\" cdkTreeNodeToggle>\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    {{node.name}}\n    <div [class.example-tree-invisible]=\"!treeControl.isExpanded(node)\">\n      <ng-container cdkTreeNodeOutlet></ng-container>\n    </div>\n  </cdk-nested-tree-node>\n</cdk-tree>\n","import {ArrayDataSource} from '@angular/cdk/collections';\nimport {Component} from '@angular/core';\nimport {NestedTreeControl} from '@angular/cdk/tree';\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optiona list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\nconst TREE_DATA: FoodNode[] = [\n  {\n    name: 'Fruit',\n    children: [\n      {name: 'Apple'},\n      {name: 'Banana'},\n      {name: 'Fruit loops'},\n    ]\n  }, {\n    name: 'Vegetables',\n    children: [\n      {\n        name: 'Green',\n        children: [\n          {name: 'Broccoli'},\n          {name: 'Brussels sprouts'},\n        ]\n      }, {\n        name: 'Orange',\n        children: [\n          {name: 'Pumpkins'},\n          {name: 'Carrots'},\n        ]\n      },\n    ]\n  },\n];\n\n/**\n * @title Tree with nested nodes\n */\n@Component({\n  selector: 'cdk-tree-nested-example',\n  templateUrl: 'cdk-tree-nested-example.html',\n  styleUrls: ['cdk-tree-nested-example.css'],\n})\nexport class CdkTreeNestedExample {\n  treeControl = new NestedTreeControl<FoodNode> (node => node.children);\n  dataSource = new ArrayDataSource(TREE_DATA);\n\n  hasChild = (_: number, node: FoodNode) => !!node.children && node.children.length > 0;\n}\n","import {CdkTreeModule} from '@angular/cdk/tree';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {CdkTreeFlatExample} from './cdk-tree-flat/cdk-tree-flat-example';\nimport {CdkTreeNestedExample} from './cdk-tree-nested/cdk-tree-nested-example';\n\nexport {\n  CdkTreeFlatExample,\n  CdkTreeNestedExample,\n};\n\nconst EXAMPLES = [\n  CdkTreeFlatExample,\n  CdkTreeNestedExample,\n];\n\n@NgModule({\n  imports: [\n    CdkTreeModule,\n    MatButtonModule,\n    MatIconModule,\n  ],\n  declarations: EXAMPLES,\n  exports: EXAMPLES,\n  entryComponents: EXAMPLES,\n})\nexport class CdkTreeExamplesModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i0","TREE_DATA","FlatTreeControl","ArrayDataSource","Component","NestedTreeControl","CdkTreeModule","MatButtonModule","MatIconModule","NgModule"],"mappings":"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"}